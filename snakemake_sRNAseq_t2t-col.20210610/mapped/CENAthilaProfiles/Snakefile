# Snakemake workflow for creating a matrix of windowed
# coverage values for genomic features and flanking regions 

# Usage ("--cores" should match the "THREADS" parameter in config.yaml, and reflect available threads):
# conda activate ChIPseq_mapping
# snakemake -p --cores 48
# conda deactivate

import os

# Specify config file parameters
configfile: "config.yaml"
sample    = config["SAMPLE"]
chrName   = config["FEATURES"]["chrName"]
reference = config["MAPPING"]["reference"]
refbase   = os.path.basename(reference)
mode      = config["MAPPING"]["mode"]
sRNAsizes = config["sRNA_SIZES"]
flankName = config["COVERAGE"]["flankName"]
binName   = config["COVERAGE"]["binName"]

# Specify the desired end target file(s)
rule all:
    input:
        expand("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENgapAllAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               sRNAsizes = sRNAsizes,
               mode = mode,
               chrName = chrName,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               sRNAsizes = sRNAsizes,
               mode = mode,
               chrName = chrName,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_nonCENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               sRNAsizes = sRNAsizes,
               mode = mode,
               chrName = chrName,
               binName = binName,
               flankName = flankName)

# Use computeMatrix function from deepTools to create a matrix of
# coverage values for genomic features and flanking regions, and
# for equivalent random loci and flanking regions
rule compute_matrix_genomeRegionFeatures:
    """Create matrices of coverage values for genomic features and random loci"""
    input:
        CENgapAllAthilaFile       = "/home/ajt200/analysis/nanopore/{refbase}/annotation/CENgapAllAthila/CENgapAllAthila_in_{refbase}_{chrName}.bed",
        CENAthilaFile    = "/home/ajt200/analysis/nanopore/{refbase}/annotation/CENAthila/CENAthila_in_{refbase}_{chrName}.bed",
        nonCENAthilaFile = "/home/ajt200/analysis/nanopore/{refbase}/annotation/nonCENAthila/nonCENAthila_in_{refbase}_{chrName}.bed",
        BW               = "../{mode}/bw/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_TPM.bw"
    output:
        CENgapAllAthilaGZ        = temp("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENgapAllAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.gz"),
        CENgapAllAthilaTAB       = "matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENgapAllAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab",
        CENAthilaGZ     = temp("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.gz"),
        CENAthilaTAB    = "matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab",
        nonCENAthilaGZ  = temp("matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_nonCENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.gz"),
        nonCENAthilaTAB = "matrices/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_nonCENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.tab"
    params:
        regionBodyLength        = config["COVERAGE"]["regionBodyLength"],
        startLabel              = config["COVERAGE"]["startLabel"],
        endLabel                = config["COVERAGE"]["endLabel"],
        upstream                = config["COVERAGE"]["upstream"],
        downstream              = config["COVERAGE"]["downstream"],
        binSize                 = config["COVERAGE"]["binSize"],
        sortRegions             = config["COVERAGE"]["sortRegions"]
    log:
        CENgapAllAthila       = "logs/computeMatrix/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENgapAllAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.log",
        CENAthila    = "logs/computeMatrix/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_CENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.log",
        nonCENAthila = "logs/computeMatrix/{sample}_MappedOn_{refbase}_{mode}_{sRNAsizes}nt_sort_norm_nonCENAthila_in_{chrName}_matrix_bin{binName}_flank{flankName}.log"
    threads:
        config["THREADS"]  
    shell:
        "(computeMatrix scale-regions"
        " --regionsFileName {input.CENgapAllAthilaFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.CENgapAllAthilaGZ}"
        " --outFileNameMatrix {output.CENgapAllAthilaTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.CENgapAllAthila}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.CENAthilaFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.CENAthilaGZ}"
        " --outFileNameMatrix {output.CENAthilaTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.CENAthila}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.nonCENAthilaFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.nonCENAthilaGZ}"
        " --outFileNameMatrix {output.nonCENAthilaTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.nonCENAthila}"
